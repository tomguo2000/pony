openapi: 3.0.0
info:
  title: Pet Shop Example API
  version: 1.0.0
  description: Simple example API to store and retrieve pets
  x-audience: external-public
  x-api-id: d2b9be12-eb8b-4d16-83a9-178c8144aedf

components:

  schemas:
    Users:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        register_source:
          type: string
        email_verified:
          type: boolean
    UserGroups:
      type: object
      required:
        - maxcapacity
      properties:
        group_name:
          type: string
        maxcapacity:
          type: integer
        current_capacity:
          type: integer
    Routes:
      type: object
      properties:
        group_id:
          type: integer
        sequence:
          type: integer
        online:
          type: integer
        domain:
          type: string
        ipaddress:
          type: string
        servernameEN:
          type: string
        servernameCN:
          type: string
        trafficLimit:
          type: integer
        trafficUsed:
          type: integer
        trafficResetDay:
          type: string
    Services:
      type: object
      required:
        - user_id
        - thunderservice_id
      properties:
        user_id:
          type: string
        thunderservice_id:
          type: string
        service_start_date:
          type: string
          format: date
          description: 服务开始日期
        service_end_date:
          type: string
          format: date
          description: 服务结束日期

paths:

  /tracking:
    post:
      tags:
        - tracking
      summary: tracking user's action
      operationId: application.funcs.search_tracking
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pager:
                  type: object
                  properties:
                    pageNum:
                      type: integer
                    pageSize:
                      type: integer
                searchData:
                  type: object
                  properties:
                    userID:
                      type: integer
                    content:
                      type: string
                    result:
                      type: string
      responses:
        "200":
          description: success

  /init:
    get:
      tags:
        - user
      summary: init
      operationId: application.funcs.init
      parameters:
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: success


  /login:
    post:
      tags:
        - user
      summary: User login
      operationId: application.funcs.user_login
      parameters:
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Users"
        required: true
      responses:
        "200":
          description: success

  "/users/{user_id}":
    get:
      tags:
        - user
      operationId: application.funcs.get_user
      summary: Get User
      parameters:
        - name: user_id
          in: path
          description: path arg
          required: true
          schema:
            type: integer
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: Success
    put:
      tags:
        - user
      summary: Modify a user by id
      operationId: application.funcs.modify_user_by_id
      parameters:
        - name: user_id
          in: path
          description: path arg
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Users"
      responses:
        "200":
          description: success
    delete:
      tags:
        - user
      operationId: application.funcs.delete_user
      summary: Remove a user
      parameters:
        - name: user_id
          in: path
          description: path arg
          required: true
          schema:
            type: integer
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      responses:
        "204":
          description: User was deleted
        "404":
          description: User does not exist
  "/users/service/{user_id}":
    get:
      tags:
        - user
        - resource
      operationId: application.funcs.get_user_service
      summary: Get User' Service Resource
      parameters:
        - name: user_id
          in: path
          description: path arg
          required: true
          schema:
            type: integer
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: Success

  /users/service:
    post:
      tags:
        - user
        - service
      operationId: application.funcs.active_user_service
      summary: Active User' Service Resource
      parameters:
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Services"
        required: true
      responses:
        "200":
          description: success
  /users:
    get:
      tags:
        - user
      summary: user list
      operationId: application.funcs.get_users
      responses:
        "200":
          description: success
    post:
      tags:
        - user
      summary: Add a user
      operationId: application.funcs.add_user
      parameters:
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Users"
        required: true
      responses:
        "200":
          description: success
  "/usergroups/{usergroup_id}":
    get:
      tags:
        - usergroup
      operationId: application.funcs.get_usergroup
      summary: Get User Group
      parameters:
        - name: usergroup_id
          in: path
          description: path arg
          required: true
          schema:
            type: integer
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: Success
    put:
      tags:
        - usergroup
      summary: Modify a usergroup by id
      operationId: application.funcs.modify_usergroup_by_id
      parameters:
        - name: usergroup_id
          in: path
          description: path arg
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserGroups"
      responses:
        "200":
          description: success
    delete:
      tags:
        - usergroup
      operationId: application.funcs.delete_usergroup
      summary: Remove a usergroup
      parameters:
        - name: usergroup_id
          in: path
          description: path arg
          required: true
          schema:
            type: integer
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      responses:
        "204":
          description: UserGroup was deleted
        "404":
          description: UserGroup does not exist
  /usergroups:
    get:
      tags:
        - usergroup
      summary: Get all user group
      operationId: application.funcs.get_all_usergroup
      parameters:
        - name: thunderservice
          in: query
          description: get usergroup only for thunderservice
          required: false
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Success
    post:
      tags:
        - usergroup
      summary: Add a user group
      operationId: application.funcs.add_usergroup
      parameters:
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserGroups"
        required: true
      responses:
        "200":
          description: success
  "/usergroups/refill/{usergroup_id}":
    get:
      tags:
        - usergroup
      operationId: application.funcs.refill
      summary: Sync UserGroup's available password
      parameters:
        - name: usergroup_id
          in: path
          description: path arg
          required: true
          schema:
            type: integer
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: Success
  /routes:
    get:
      tags:
        - route
      summary: Add a route
      operationId: application.funcs.get_routes
      responses:
        "200":
          description: Success
    post:
      tags:
        - route
      summary: Add a route
      operationId: application.funcs.add_route
      parameters:
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Routes"
        required: true
      responses:
        "200":
          description: success
  "/routes/group/{group_id}":
    get:
      tags:
        - route
      operationId: application.funcs.get_routes_by_group_id
      summary: Get routes by group ID
      parameters:
        - name: group_id
          in: path
          description: path arg
          required: true
          schema:
            type: integer
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: Success
  "/routes/{route_id}":
    get:
      tags:
        - route
      operationId: application.funcs.get_route
      summary: Get route by ID
      parameters:
        - name: route_id
          in: path
          description: path arg
          required: true
          schema:
            type: integer
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: Success
    put:
      tags:
        - route
      summary: Modify a route by id
      operationId: application.funcs.modify_route_by_id
      parameters:
        - name: route_id
          in: path
          description: path arg
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Routes"
      responses:
        "200":
          description: success
    delete:
      tags:
        - route
      operationId: application.funcs.delete_route
      summary: Remove a route
      parameters:
        - name: route_id
          in: path
          description: path arg
          required: true
          schema:
            type: integer
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      responses:
        "204":
          description: route was deleted
        "404":
          description: route does not exist
  "/routes/push/{route_id}":
    get:
      tags:
        - route
      operationId: application.funcs.push_route
      summary: Push route to sync data once
      parameters:
        - name: route_id
          in: path
          description: path arg
          required: true
          schema:
            type: integer
        - name: flag
          in: query
          description: url arg
          required: false
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: Success