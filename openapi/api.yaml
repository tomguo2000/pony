swagger: '2.0'
info:
  title: Pet Shop Example API
  version: "1.0.0"
  description: Simple example API to store and retrieve pets
  x-audience: external-public
  x-api-id: d2b9be12-eb8b-4d16-83a9-178c8144aedf
consumes:
  - application/json
produces:
  - application/json
paths:
  /users/{user_id}:
    get:
      tags: [user]
      operationId: application.funcs.get_user
      summary: Get User
      parameters:
        - name: "user_id"
          in: "path"
          description: "path arg"
          required: true
          type: "integer"
        - name: "flag"
          in: "query"
          description: "url arg"
          required: false
          type: "integer"
          default: 1
      responses:
        200:
          description: Success
    put:
      tags: [user]
      summary: Modify a user by id
      operationId: application.funcs.modify_user_by_id
      parameters:
        - name: "user_id"
          in: "path"
          description: "path arg"
          required: true
          type: "integer"
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Users'
      responses:
        200:
          description: success

    delete:
      tags: [user]
      operationId: application.funcs.delete_user
      summary: Remove a user
      parameters:
        - name: "user_id"
          in: "path"
          description: "path arg"
          required: true
          type: "integer"
        - name: "flag"
          in: "query"
          description: "url arg"
          required: false
          type: "integer"
          default: 1
      responses:
        204:
          description: User was deleted
        404:
          description: User does not exist
  /users:
    get:
      tags: [user]
      summary: user list
      operationId: application.funcs.get_users
      responses:
        200:
          description: success
    put:
      tags: [user]
      summary: Modify a user
      operationId: application.funcs.modify_user
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Users'
      responses:
        200:
          description: success
    post:
      tags: [user]
      summary: Add a user
      operationId: application.funcs.add_user
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Users'
        - name: "flag"
          in: "query"
          description: "url arg"
          required: false
          type: "integer"
          default: 1
      responses:
        200:
          description: success

  /usergroups/{usergroup_id}:
    get:
      tags: [usergroup]
      operationId: application.funcs.get_usergroup
      summary: Get User Group
      parameters:
        - name: "usergroup_id"
          in: "path"
          description: "path arg"
          required: true
          type: "integer"
        - name: "flag"
          in: "query"
          description: "url arg"
          required: false
          type: "integer"
          default: 1
      responses:
        200:
          description: Success
    put:
      tags: [usergroup]
      summary: Modify a usergroup by id
      operationId: application.funcs.modify_usergroup_by_id
      parameters:
        - name: "usergroup_id"
          in: "path"
          description: "path arg"
          required: true
          type: "integer"
        - in: body
          name: body
          schema:
            $ref: '#/definitions/UserGroups'
      responses:
        200:
          description: success

    delete:
      tags: [usergroup]
      operationId: application.funcs.delete_usergroup
      summary: Remove a usergroup
      parameters:
        - name: "usergroup_id"
          in: "path"
          description: "path arg"
          required: true
          type: "integer"
        - name: "flag"
          in: "query"
          description: "url arg"
          required: false
          type: "integer"
          default: 1
      responses:
        204:
          description: UserGroup was deleted
        404:
          description: UserGroup does not exist
  /usergroups:
    get:
      tags: [usergroup]
      summary: Add a user group
      operationId: application.funcs.get_all_usergroup
      parameters: []
      responses:
        200:
          description: Success
    post:
      tags: [usergroup]
      summary: Add a user group
      operationId: application.funcs.add_usergroup
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserGroups'
        - name: "flag"
          in: "query"
          description: "url arg"
          required: false
          type: "integer"
          default: 1
      responses:
        200:
          description: success

  /usergroups/refill/{usergroup_id}:
    get:
      tags: [user]
      operationId: application.funcs.refill
      summary: Sync UserGroup's available password
      parameters:
        - name: "usergroup_id"
          in: "path"
          description: "path arg"
          required: true
          type: "integer"
        - name: "flag"
          in: "query"
          description: "url arg"
          required: false
          type: "integer"
          default: 1
      responses:
        200:
          description: Success

definitions:
  Users:
    type: object
    required:
      - email
    properties:
      name:
        type: string
      email:
        type: string
      password:
        type: string
  UserGroups:
    type: object
    required:
      - maxcapacity
    properties:
      group_name:
        type: string
      maxcapacity:
        type: integer
      current_capacity:
        type: integer